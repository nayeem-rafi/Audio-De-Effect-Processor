classdef App_R < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                  matlab.ui.Figure
        title                     matlab.ui.control.EditField
        file_name                 matlab.ui.control.EditField
        f_name                    matlab.ui.control.EditField
        BrowseButton              matlab.ui.control.Button
        PlayOriginalAudioButton   matlab.ui.control.Button
        ApplyReverseEffectButton  matlab.ui.control.Button
        PlayOutputAudioButton_2   matlab.ui.control.Button
        ResetButton               matlab.ui.control.Button
        SaveProcessedAudioButton  matlab.ui.control.Button
        UIAxes                    matlab.ui.control.UIAxes
        UIAxes2                   matlab.ui.control.UIAxes
        EditField                 matlab.ui.control.EditField
        GainButton                matlab.ui.control.Button
        FadeInButton              matlab.ui.control.Button
        FadeOutButton             matlab.ui.control.Button
        ReverseButton             matlab.ui.control.Button
        SpeedUpDownButton         matlab.ui.control.Button
        CompressorButton          matlab.ui.control.Button
        DistortionButton          matlab.ui.control.Button
        NormalizeButton           matlab.ui.control.Button
        ChorusButton              matlab.ui.control.Button
        PitchShiftingButton       matlab.ui.control.Button
        ShowOriginalGraphButton   matlab.ui.control.Button
        ShowEffectedGraphButton   matlab.ui.control.Button
        PlayEffectedAudioButton   matlab.ui.control.Button
        ClearSoundButton          matlab.ui.control.Button
        UIAxes2_2                 matlab.ui.control.UIAxes
        file_name_2               matlab.ui.control.EditField
        f_name_2                  matlab.ui.control.EditField
        BrowseButton_2            matlab.ui.control.Button
    end

    properties (Access = private)
        y=[]   
    Fs  
    y1=[] 
    y0  
    Fs1 
    Fs0 
    k =0 
    y100=[]
    Fs100
    y2=[]
    Fs2
    gain
    y3=[]
    Fs3
    y4=[]
    Fs4
    y5=[]
    Fs5
    y6=[]
    Fs6
    y7=[]
    Fs7
    y8=[]
    Fs8
    y9=[]
    Fs9
    y10=[]
    Fs10
    y00=[]
    Fs00
    file
    file1
    path
    path1
    selectedFile
    selectedFile2
   
    end  
    
    
    methods (Access = private)
        
        function startupFcn(app)
            app.UIFigure.Color = [0.9, 0.9, 0.9];
        end
    end
    

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: PlayOriginalAudioButton
        function PlayOriginalAudioButtonPushed(app, event)
            [y0000, Fs0000] = audioread(app.selectedFile);
           sound(y0000,Fs0000);
        end

        % Button pushed function: ApplyReverseEffectButton
        function ApplyReverseEffectButtonPushed(app, event)

            if app.k==1
                app.y0 = app.y1;            
                app.Fs0 = app.Fs1; 
            end
            if app.k==2
                app.y0 = app.y2;             
                app.Fs0 = app.Fs2;
            end
            if app.k==3
                app.y0 = app.y3;             
                app.Fs0 = app.Fs3;
            end
            if app.k==4
                app.y0 = app.y4;             
                app.Fs0 = app.Fs4;
            end
            if app.k==5
                app.y0 = app.y5;             
                app.Fs0 = app.Fs5;
            end
            if app.k==6
                app.y0 = app.y6;             
                app.Fs0 = app.Fs6;
            end
            if app.k==7
                app.y0 = app.y7;             
                app.Fs0 = app.Fs7;
            end
            if app.k==8
               app.y0 = app.y8;             
               app.Fs0 = app.Fs8;
            end
            if app.k==9
               app.y0 = app.y9;             
               app.Fs0 = app.Fs9;
            end
            if app.k==10
               app.y0 = app.y10;             
               app.Fs0 = app.Fs10;
            end
            
            plot(app.UIAxes, (0:length(app.y0)-1)/app.Fs0, app.y0);
            title(app.UIAxes, 'Output Signal');
            xlabel(app.UIAxes, 'Time (s)');
            ylabel(app.UIAxes, 'Amplitude');  
         
        end

        % Button pushed function: PlayOutputAudioButton_2
        function PlayOutputAudioButton_2Pushed(app, event)
         
           sound(app.y0,app.Fs0);
           
        end

        % Button pushed function: ResetButton
        function ResetButtonPushed(app, event)
            app.k=0;
            cla(app.UIAxes2);
            cla(app.UIAxes);
            clear sound;
            app.f_name_2.Value = '';
            app.f_name.Value = '';
        end

        % Button pushed function: SaveProcessedAudioButton
        function SaveProcessedAudioButtonPushed(app, event)
            audiowrite('Reversed Output Audio.wav', app.y0, app.Fs0);
        end

        % Button pushed function: BrowseButton
        function BrowseButtonPushed(app, event)
             % Open file browser to select a file
            [app.file1, app.path1] = uigetfile({'*.*', 'All Files'; '*.wav', 'Audio Files (*.wav)'; '*.mp3', 'MP3 Files (*.mp3)'}, 'Select an Audio File');
    
            % If the user did not cancel the dialog
            if isequal(app.file1, 0)
                 % Optionally update a label in the app rather than using disp
                 app.f_name.Value = 'No file selected';  % Or keep this field empty
            else
                 % Get the full file path
                 app.selectedFile = fullfile(app.path1, app.file1);
        
                % Display the file name in the text field (FileNameEditField)
                app.f_name.Value = app.selectedFile;
            end
            [app.y00, app.Fs00] = audioread(app.selectedFile);
        end

        % Button pushed function: GainButton
        function GainButtonPushed(app, event)
        if app.k==0
            app.y = app.y;             
            app.Fs = app.Fs;
        end
        if app.k==2
               app.y = app.y2;             
               app.Fs = app.Fs2;
        end
        if app.k==3
               app.y = app.y3;             
               app.Fs = app.Fs3;
        end
        if app.k==4
               app.y = app.y4;             
               app.Fs = app.Fs4;
        end
        if app.k==5
               app.y = app.y5;             
               app.Fs = app.Fs5;
        end
        if app.k==6
               app.y = app.y6;             
               app.Fs = app.Fs6;
        end
        if app.k==7
               app.y = app.y7;             
               app.Fs = app.Fs7;
        end
        if app.k==8
               app.y = app.y8;             
               app.Fs = app.Fs8;
        end
        if app.k==9
               app.y = app.y9;             
               app.Fs = app.Fs9;
        end
        if app.k==10
               app.y = app.y10;             
               app.Fs = app.Fs10;
        end
       
            prompt = {'Enter multiplying factor (.2 to 4 times)?'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            app.k=1;
            % Convert input to numeric
            gainValue = str2double(userInputStr{1});
            while true
                
                if gainValue >= 0.2 && gainValue <=4
                   
                   break
                else
                    prompt = {'Enter valid multiplying factor (0.2 to 4 times)?'};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            gainValue = str2double(userInputStr{1});
                end
            end
            
            % Attempt to calculate gain
            try
            app.gain = gainValue * app.y; % This should work
            catch ME
            disp('Error during multiplication:');
            disp(ME.message);
            end
            app.y1 = app.gain;             % Save the modified audio data
            app.Fs1 = app.Fs;

        end

        % Callback function
        function TrimButtonPushed(app, event)
            
     
        end

        % Button pushed function: ReverseButton
        function ReverseButtonPushed(app, event)
            if app.k==0
               app.y = app.y;             
               app.Fs = app.Fs;
            end
            if app.k==1
               app.y = app.gain;             
               app.Fs = app.Fs;
            end
            if app.k==2
               app.y = app.y2;             
               app.Fs = app.Fs2;
            end
            if app.k==3
               app.y = app.y3;             
               app.Fs = app.Fs3;
            end
            if app.k==4
               app.y = app.y4;             
               app.Fs = app.Fs4;
            end
            if app.k==5
               app.y = app.y5;             
               app.Fs = app.Fs5;
            end
            if app.k==7
               app.y = app.y7;             
               app.Fs = app.Fs7;
            end
            if app.k==8
               app.y = app.y8;             
               app.Fs = app.Fs8;
            end
            if app.k==9
               app.y = app.y9;             
               app.Fs = app.Fs9;
            end
            if app.k==10
               app.y = app.y10;             
               app.Fs = app.Fs10;
            end
            
            app.k=6;
            app.y6 = flipud(app.y);
            app.Fs6=app.Fs;
           
        end

        % Button pushed function: FadeInButton
        function FadeInButtonPushed(app, event)
            if app.k==0
               app.y = app.y;             
               app.Fs = app.Fs;
            end
            if app.k==1
               app.y = app.gain;             
               app.Fs = app.Fs;
            end
            if app.k==2
               app.y = app.y2;             
               app.Fs = app.Fs2;
            end
            if app.k==4
               app.y = app.y4;             
               app.Fs = app.Fs4;
            end
            if app.k==5
               app.y = app.y5;             
               app.Fs = app.Fs5;
            end
            if app.k==6
               app.y = app.y6;             
               app.Fs = app.Fs6;
            end
            if app.k==7
               app.y = app.y7;             
               app.Fs = app.Fs7;
            end
            if app.k==8
               app.y = app.y8;             
               app.Fs = app.Fs8;
            end
            if app.k==9
               app.y = app.y9;             
               app.Fs = app.Fs9;
            end
            if app.k==10
               app.y = app.y10;             
               app.Fs = app.Fs10;
            end
            
            nsamples = length(app.y);
            app.k=3;
            prompt = {'Enter percentage of signal you want to be fade in?(0 to 100)'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            x = str2double(userInputStr{1});
            while true
                
                if x> 0 && x<100
                   
                   break
                else
                    prompt = {'Enter valid percentage'};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            x= str2double(userInputStr{1});
                end
            end
            
           gradin = round(nsamples*(x/100));

           fadeout = [linspace(0, 1, gradin), ones(1, nsamples - gradin)]';
           if size(app.y, 2) > 1
              fadeout = [fadeout, fadeout];
           end
           z = 0.000001;
           fadeout(fadeout == 0) = z;
           app.y3 = app.y ./ fadeout;
            
            app.Fs3=app.Fs;
            
        end

        % Button pushed function: FadeOutButton
        function FadeOutButtonPushed(app, event)
            if app.k==0
               app.y = app.y;             
               app.Fs = app.Fs;
            end
            if app.k==1
               app.y = app.gain;             
               app.Fs = app.Fs;
            end
            if app.k==3
               app.y = app.y3;             
               app.Fs = app.Fs3;
            end
            if app.k==4
               app.y = app.y4;             
               app.Fs = app.Fs4;
            end
            if app.k==5
               app.y = app.y5;             
               app.Fs = app.Fs5;
            end
            if app.k==6
               app.y = app.y6;             
               app.Fs = app.Fs6;
            end
            if app.k==7
               app.y = app.y7;             
               app.Fs = app.Fs7;
            end
            if app.k==8
               app.y = app.y8;             
               app.Fs = app.Fs8;
            end
            if app.k==9
               app.y = app.y9;             
               app.Fs = app.Fs9;
            end
            if app.k==10
               app.y = app.y10;             
               app.Fs = app.Fs10;
            end
           
            nsamples = length(app.y);
            app.k=2;
            prompt = {'Enter percentage of signal you want to be fade out?(0 to 100)'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            x = str2double(userInputStr{1});
            while true
                
                if x> 0 && x<100
                   
                   break
                else
                    prompt = {'Enter valid percentage'};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            x= str2double(userInputStr{1});
                end
            end
            
            gradin = round(nsamples*(x/100));
            T = nsamples / app.Fs;

            fadeout = [linspace(1, 0,gradin), zeros(1, nsamples - gradin)]';

            if size(app.y, 2) > 1
               fadeout = [fadeout, fadeout]; 
            end
            z = 0.000001;
            fadeout(fadeout == 0) = z;
            app.y2 = app.y ./ fadeout;
            
            app.Fs2=app.Fs;
          
        end

        % Button pushed function: ShowOriginalGraphButton
        function ShowOriginalGraphButtonPushed(app, event)

          plot(app.UIAxes2_2, (0:length(app.y00)-1)/app.Fs00, app.y00);
          title(app.UIAxes2_2, 'Original Signal');
          xlabel(app.UIAxes2_2, 'Time (s)');
          ylabel(app.UIAxes2_2, 'Amplitude'); 
        end

        % Button pushed function: SpeedUpDownButton
        function SpeedUpDownButtonPushed(app, event)
            if app.k==0
               app.y = app.y;             
               app.Fs = app.Fs;
            end
            if app.k==1
               app.y = app.gain;             
               app.Fs = app.Fs;
            end
            if app.k==2
               app.y = app.y2;             
               app.Fs = app.Fs2;
            end
            if app.k==3
               app.y = app.y3;             
               app.Fs = app.Fs3;
            end
            if app.k==5
               app.y = app.y5;             
               app.Fs = app.Fs5;
            end
            if app.k==6
               app.y = app.y6;             
               app.Fs = app.Fs6;
            end
            if app.k==7
               app.y = app.y7;             
               app.Fs = app.Fs7;
            end
            if app.k==8
               app.y = app.y8;             
               app.Fs = app.Fs8;
            end
            if app.k==9
               app.y = app.y9;             
               app.Fs = app.Fs9;
            end
            if app.k==10
               app.y = app.y10;             
               app.Fs = app.Fs10;
            end
            
            app.k=4;
            prompt = {'Enter speed factor from .2x to 4x:'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            inp = str2double(userInputStr{1});
            while true
                
                if inp>= 0.2 && inp<=4
                   
                   break
                else
                    prompt = {'Enter valid speedup multiflying factor from .2x to 4x:'};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            inp= str2double(userInputStr{1});
                end
            end
            
            app.Fs4 = app.Fs * inp;
            app.y4=app.y;
        end

        % Callback function
        function EchoButtonPushed(app, event)
            
        end

        % Callback function
        function DelayButtonPushed(app, event)
            
        end

        % Callback function
        function ReverbButtonPushed(app, event)
            
        end

        % Button pushed function: ChorusButton
        function ChorusButtonPushed(app, event)
            if app.k==0
               app.y = app.y;             
               app.Fs = app.Fs;
            end
            if app.k==1
               app.y = app.gain;             
               app.Fs = app.Fs;
            end
            if app.k==2
               app.y = app.y2;             
               app.Fs = app.Fs2;
            end
            if app.k==3
               app.y = app.y3;             
               app.Fs = app.Fs3;
            end
            if app.k==4
               app.y = app.y4;             
               app.Fs = app.Fs4;
            end 
            if app.k==5
               app.y = app.y5;             
               app.Fs = app.Fs5;
            end
            if app.k==6
               app.y = app.y6;             
               app.Fs = app.Fs6;
            end
            if app.k==7
               app.y = app.y7;             
               app.Fs = app.Fs7;
            end
            if app.k==9
               app.y = app.y9;             
               app.Fs = app.Fs9;
            end
            if app.k==10
               app.y = app.y10;             
               app.Fs = app.Fs10;
            end
            
            app.k=8;
            numVoices = 7;
            prompt = {'delaytime 0 to 0.3 : '};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            delayT = str2double(userInputStr{1});
            while true
                
                if delayT >= 0 && delayT <= 0.3
                   
                   break
                else
                    prompt = {'Enter valid delaytime 0 to 0.3 : '};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            delayT = str2double(userInputStr{1});
                end
            end
            
            depth = 0.005; 
            rate = 0.5;
            prompt = {'feedbackgain 0 to 1 : '};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            feedbackgain = str2double(userInputStr{1});
            while true
                
                if feedbackgain >= 0 && feedbackgain <= 1
                   
                   break
                else
                    prompt = {'Enter valid feedbackgain 0 to 1 : '};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            feedbackgain = str2double(userInputStr{1});
                end
            end
           
            app.y8 = zeros(size(app.y));
            t = (0:length(app.y)-1) / app.Fs; 
            modulation = depth * sin(2 * pi * rate * t);
            for i = 1:numVoices
                currentDelayTime = delayT + modulation; 
                currentDelaySamples = round(currentDelayTime * app.Fs); 

                delayedS = zeros(size(app.y)); 
    
                for n = 1:length(app.y)
                    d = n - currentDelaySamples(n);
                    if d > 0
                       delayedS(n) = app.y(n) + feedbackgain * app.y(d);
                    else
                    delayedS(n) = app.y(n) ; 
                    end
                    app.y8(n) = app.y(n) - delayedS(n); 
               end
            end
           app.y8 = app.y8 / max(abs(app.y8));
           app.Fs8 = app.Fs;
        end

        % Button pushed function: PitchShiftingButton
        function PitchShiftingButtonPushed(app, event)
            if app.k==0
               app.y = app.y;             
               app.Fs = app.Fs;
            end
            if app.k==1
               app.y = app.gain;             
               app.Fs = app.Fs;
            end
            if app.k==2
               app.y = app.y2;             
               app.Fs = app.Fs2;
            end
            if app.k==3
               app.y = app.y3;             
               app.Fs = app.Fs3;
            end
            if app.k==4
               app.y = app.y4;             
               app.Fs = app.Fs4;
            end 
            if app.k==5
               app.y = app.y5;             
               app.Fs = app.Fs5;
            end
            if app.k==6
               app.y = app.y6;             
               app.Fs = app.Fs6;
            end
            if app.k==7
               app.y = app.y7;             
               app.Fs = app.Fs7;
            end
            if app.k==8
               app.y = app.y8;             
               app.Fs = app.Fs8;
            end
            if app.k==9
               app.y = app.y9;             
               app.Fs = app.Fs9;
            end
            
            app.k=10;
            prompt = {'Enter the nSemitones value from -8 to 8: '};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            nSemitones = str2double(userInputStr{1});
            while true
                
                if nSemitones >= -8 && nSemitones <= 8
                   
                   break
                else
                    prompt = {'Enter valid nSemitones from -8 to 8 '};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            nSemitones = str2double(userInputStr{1});
                end
            end
              
            reverseShiftFactor = 2^((nSemitones)/12); 
            app.y10 = resample(app.y, round(app.Fs * reverseShiftFactor), app.Fs);
            app.Fs10 = app.Fs;
        end

        % Button pushed function: CompressorButton
        function CompressorButtonPushed(app, event)
            if app.k==0
               app.y = app.y;             
               app.Fs = app.Fs;
            end
            if app.k==1
               app.y = app.gain;             
               app.Fs = app.Fs;
            end
            if app.k==2
               app.y = app.y2;             
               app.Fs = app.Fs2;
            end
            if app.k==3
               app.y = app.y3;             
               app.Fs = app.Fs3;
            end
            if app.k==4
               app.y = app.y4;             
               app.Fs = app.Fs4;
            end 
            if app.k==6
               app.y = app.y6;             
               app.Fs = app.Fs6;
            end
            if app.k==7
               app.y = app.y7;             
               app.Fs = app.Fs7;
            end
            if app.k==8
               app.y = app.y8;             
               app.Fs = app.Fs8;
            end
            if app.k==9
               app.y = app.y9;             
               app.Fs = app.Fs9;
            end
            if app.k==10
               app.y = app.y10;             
               app.Fs = app.Fs10;
            end

            app.k=5;
            prompt = {'Enter threshold -100 to 0 dB?'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            threshold = str2double(userInputStr{1});
            while true
                
                if threshold <= 0 && threshold >=-100
                   
                   break
                else
                    prompt = {'Enter valid threshold -100 to 0 dB?'};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            threshold = str2double(userInputStr{1});
                end
            end
            prompt = {'Enter ratio 1 to 20?'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            ratio = str2double(userInputStr{1});
            while true
                
                if ratio >= 1 && ratio <=20
                   
                   break
                else
                    prompt = {'Enter valid ratio 1 to 20?'};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            ratio = str2double(userInputStr{1});
                end
            end
            prompt = {'Enter makeup 1 to 10?'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            makeupgain = str2double(userInputStr{1});
            while true
                
                if makeupgain >= 1 && makeupgain <=10
                   
                   break
                else
                    prompt = {'Enter valid makeup 1 to 10?'};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            makeupgain = str2double(userInputStr{1});
                end
            end
            prompt = {'Enter attackTime 0 to 1?'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            attacktime = str2double(userInputStr{1});
            while true
                
                if attacktime >= 0 && attacktime <=1
                   
                   break
                else
                    prompt = {'Enter valid attackTime 0 to 1?'};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            attacktime = str2double(userInputStr{1});
                end
            end
            prompt = {'Enter releaseTime 0 to 1?'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            releasetime = str2double(userInputStr{1});
            while true
                
                if releasetime >= 0 && releasetime <=1
                   
                   break
                else
                    prompt = {'Enter valid releaseTime 0 to 1?'};
                    dlgTitle = 'Input';
                    numLines = 1;
                    userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            releasetime = str2double(userInputStr{1});
                end
            end
            

            thresholdLin = 10^(threshold / 20);
            makeupgainLin = 10^(makeupgain / 20);

            attackSamples = round(attacktime * app.Fs);
            releaseSamples = round(releasetime * app.Fs);
            app.y5 = zeros(size(app.y));
            gainEn = 1;


           for n = 1:length(app.y)
               inputLevel = abs(app.y(n));
  
               if inputLevel > thresholdLin
                  gainEx = 1 + (ratio - 1) * (inputLevel - thresholdLin) / inputLevel;
               else
                  gainEx = 1;
               end
               if gainEx > gainEn
                  gainEn = gainEn + (gainEx - gainEn) / attackSamples;
               else
                  gainEn = gainEn + (gainEx - gainEn) / releaseSamples;
               end
               app.y5(n) = app.y(n) * gainEn;
           end
           app.y5 = app.y5 * makeupgainLin;
           app.y5 = min(max(app.y5, -1), 1);
           app.Fs5 = app.Fs;
        end

        % Button pushed function: NormalizeButton
        function NormalizeButtonPushed(app, event)
            if app.k==0
               app.y = app.y;             
               app.Fs = app.Fs;
            end
            if app.k==1
               app.y = app.gain;             
               app.Fs = app.Fs;
            end
            if app.k==2
               app.y = app.y2;             
               app.Fs = app.Fs2;
            end
            if app.k==3
               app.y = app.y3;             
               app.Fs = app.Fs3;
            end
            if app.k==4
               app.y = app.y4;             
               app.Fs = app.Fs4;
            end 
            if app.k==5
               app.y = app.y5;             
               app.Fs = app.Fs5;
            end
            if app.k==6
               app.y = app.y6;             
               app.Fs = app.Fs6;
            end
            if app.k==8
               app.y = app.y8;             
               app.Fs = app.Fs8;
            end
            if app.k==9
               app.y = app.y9;             
               app.Fs = app.Fs9;
            end
            if app.k==10
               app.y = app.y10;             
               app.Fs = app.Fs10;
            end
            
            app.k=7;
            peak = max(abs(app.y));
            prompt = {'Enter level peak?'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            level = str2double(userInputStr{1});
            app.y7 = (app.y / peak) * level;
            app.Fs7 = app.Fs;
        end

        % Button pushed function: DistortionButton
        function DistortionButtonPushed(app, event)
            if app.k==0
               app.y = app.y;             
               app.Fs = app.Fs;
            end
            if app.k==1
               app.y = app.gain;             
               app.Fs = app.Fs;
            end
            if app.k==2
               app.y = app.y2;             
               app.Fs = app.Fs2;
            end
            if app.k==3
               app.y = app.y3;             
               app.Fs = app.Fs3;
            end
            if app.k==4
               app.y = app.y4;             
               app.Fs = app.Fs4;
            end 
            if app.k==5
               app.y = app.y5;             
               app.Fs = app.Fs5;
            end
            if app.k==6
               app.y = app.y6;             
               app.Fs = app.Fs6;
            end
            if app.k==7
               app.y = app.y7;             
               app.Fs = app.Fs7;
            end
            if app.k==8
               app.y = app.y8;             
               app.Fs = app.Fs8;
            end
            if app.k==10
               app.y = app.y10;             
               app.Fs = app.Fs10;
            end
            
            app.k=9;
            N_fft = length(app.y);               
            window = hanning(N_fft);
            f = linspace(-app.Fs/3, app.Fs/3, N_fft);
            prompt = {'Enter amplifying factor?'};
            dlgTitle = 'Input';
            numLines = 1;
            userInputStr = inputdlg(prompt, dlgTitle, numLines);

            % Convert input to numeric
            g = str2double(userInputStr{1});
            Y = fftshift(fft(app.y .* window, N_fft));
            magY = abs(Y); 
            phaseY = angle(Y);
            threshold = 0.1 * max(magY);  
            Y_filtered = Y;
            Y_filtered(magY < threshold) = 0;
            app.y9 = real(ifft(ifftshift(Y_filtered), N_fft)); 

            app.y9 = app.y9 / max(abs(app.y9));
            app.Fs9 = app.Fs;
        end

        % Value changed function: f_name
        function f_nameValueChanged(app, event)
            value = app.f_name.Value;
            
        end

        % Button pushed function: BrowseButton_2
        function BrowseButton_2Pushed(app, event)
            % Open file browser to select a file
            [app.file, app.path] = uigetfile({'*.*', 'All Files'; '*.wav', 'Audio Files (*.wav)'; '*.mp3', 'MP3 Files (*.mp3)'}, 'Select an Audio File');
    
            % If the user did not cancel the dialog
            if isequal(app.file, 0)
                 % Optionally update a label in the app rather than using disp
                 app.f_name_2.Value = 'No file selected';  % Or keep this field empty
            else
                 % Get the full file path
                 app.selectedFile2 = fullfile(app.path, app.file);
        
                % Display the file name in the text field (FileNameEditField)
                app.f_name_2.Value = app.selectedFile2;
            end
            [app.y, app.Fs] = audioread(app.selectedFile2);
        end

        % Button pushed function: ShowEffectedGraphButton
        function ShowEffectedGraphButtonPushed(app, event)
            plot(app.UIAxes2, (0:length(app.y)-1)/app.Fs, app.y);
          title(app.UIAxes2, 'Effected Signal');
          xlabel(app.UIAxes2, 'Time (s)');
          ylabel(app.UIAxes2, 'Amplitude');
        end

        % Button pushed function: PlayEffectedAudioButton
        function PlayEffectedAudioButtonPushed(app, event)
        [y00000, Fs00000] = audioread(app.selectedFile2);
            sound(y00000,Fs00000);
        end

        % Button pushed function: ClearSoundButton
        function ClearSoundButtonPushed(app, event)
            clear sound;
        end

        % Value changed function: f_name_2
        function f_name_2ValueChanged(app, event)
            value = app.f_name_2.Value;
            
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Color = [0.651 0.651 0.651];
            app.UIFigure.Position = [100 100 924 542];
            app.UIFigure.Name = 'UI Figure';

            % Create title
            app.title = uieditfield(app.UIFigure, 'text');
            app.title.HorizontalAlignment = 'center';
            app.title.FontSize = 22;
            app.title.FontWeight = 'bold';
            app.title.FontColor = [1 1 1];
            app.title.BackgroundColor = [0 0 0];
            app.title.Position = [16 494 918 31];
            app.title.Value = 'Audio Effect Processor';

            % Create file_name
            app.file_name = uieditfield(app.UIFigure, 'text');
            app.file_name.HorizontalAlignment = 'center';
            app.file_name.Position = [18 454 120 22];
            app.file_name.Value = 'Original File Name';

            % Create f_name
            app.f_name = uieditfield(app.UIFigure, 'text');
            app.f_name.ValueChangedFcn = createCallbackFcn(app, @f_nameValueChanged, true);
            app.f_name.Position = [150 454 225 22];

            % Create BrowseButton
            app.BrowseButton = uibutton(app.UIFigure, 'push');
            app.BrowseButton.ButtonPushedFcn = createCallbackFcn(app, @BrowseButtonPushed, true);
            app.BrowseButton.Position = [381 454 57 22];
            app.BrowseButton.Text = 'Browse';

            % Create PlayOriginalAudioButton
            app.PlayOriginalAudioButton = uibutton(app.UIFigure, 'push');
            app.PlayOriginalAudioButton.ButtonPushedFcn = createCallbackFcn(app, @PlayOriginalAudioButtonPushed, true);
            app.PlayOriginalAudioButton.BackgroundColor = [0 0 0];
            app.PlayOriginalAudioButton.FontColor = [1 1 1];
            app.PlayOriginalAudioButton.Position = [272 208 145 22];
            app.PlayOriginalAudioButton.Text = 'Play Original Audio';

            % Create ApplyReverseEffectButton
            app.ApplyReverseEffectButton = uibutton(app.UIFigure, 'push');
            app.ApplyReverseEffectButton.ButtonPushedFcn = createCallbackFcn(app, @ApplyReverseEffectButtonPushed, true);
            app.ApplyReverseEffectButton.BackgroundColor = [0 0 0];
            app.ApplyReverseEffectButton.FontColor = [1 1 1];
            app.ApplyReverseEffectButton.Position = [39 125 134 22];
            app.ApplyReverseEffectButton.Text = 'Apply Reverse Effect';

            % Create PlayOutputAudioButton_2
            app.PlayOutputAudioButton_2 = uibutton(app.UIFigure, 'push');
            app.PlayOutputAudioButton_2.ButtonPushedFcn = createCallbackFcn(app, @PlayOutputAudioButton_2Pushed, true);
            app.PlayOutputAudioButton_2.BackgroundColor = [0 0 0];
            app.PlayOutputAudioButton_2.FontColor = [1 1 1];
            app.PlayOutputAudioButton_2.Position = [271 126 146 22];
            app.PlayOutputAudioButton_2.Text = 'Play Output Audio';

            % Create ResetButton
            app.ResetButton = uibutton(app.UIFigure, 'push');
            app.ResetButton.ButtonPushedFcn = createCallbackFcn(app, @ResetButtonPushed, true);
            app.ResetButton.BackgroundColor = [0 0 0];
            app.ResetButton.FontColor = [1 1 1];
            app.ResetButton.Position = [41 79 131 22];
            app.ResetButton.Text = 'Reset';

            % Create SaveProcessedAudioButton
            app.SaveProcessedAudioButton = uibutton(app.UIFigure, 'push');
            app.SaveProcessedAudioButton.ButtonPushedFcn = createCallbackFcn(app, @SaveProcessedAudioButtonPushed, true);
            app.SaveProcessedAudioButton.BackgroundColor = [0 0 0];
            app.SaveProcessedAudioButton.FontColor = [1 1 1];
            app.SaveProcessedAudioButton.Position = [147 44 144 22];
            app.SaveProcessedAudioButton.Text = 'Save Processed Audio';

            % Create UIAxes
            app.UIAxes = uiaxes(app.UIFigure);
            title(app.UIAxes, 'Title')
            xlabel(app.UIAxes, 'X')
            ylabel(app.UIAxes, 'Y')
            app.UIAxes.Position = [460 17 368 139];

            % Create UIAxes2
            app.UIAxes2 = uiaxes(app.UIFigure);
            title(app.UIAxes2, 'Title')
            xlabel(app.UIAxes2, 'X')
            ylabel(app.UIAxes2, 'Y')
            app.UIAxes2.Position = [460 179 368 134];

            % Create EditField
            app.EditField = uieditfield(app.UIFigure, 'text');
            app.EditField.Position = [16 368 422 22];
            app.EditField.Value = '                                                            Effects';

            % Create GainButton
            app.GainButton = uibutton(app.UIFigure, 'push');
            app.GainButton.ButtonPushedFcn = createCallbackFcn(app, @GainButtonPushed, true);
            app.GainButton.Position = [14 332 100 22];
            app.GainButton.Text = 'Gain';

            % Create FadeInButton
            app.FadeInButton = uibutton(app.UIFigure, 'push');
            app.FadeInButton.ButtonPushedFcn = createCallbackFcn(app, @FadeInButtonPushed, true);
            app.FadeInButton.Position = [228 332 100 22];
            app.FadeInButton.Text = 'Fade In';

            % Create FadeOutButton
            app.FadeOutButton = uibutton(app.UIFigure, 'push');
            app.FadeOutButton.ButtonPushedFcn = createCallbackFcn(app, @FadeOutButtonPushed, true);
            app.FadeOutButton.Position = [121 332 100 22];
            app.FadeOutButton.Text = 'Fade Out';

            % Create ReverseButton
            app.ReverseButton = uibutton(app.UIFigure, 'push');
            app.ReverseButton.ButtonPushedFcn = createCallbackFcn(app, @ReverseButtonPushed, true);
            app.ReverseButton.Position = [121 298 100 22];
            app.ReverseButton.Text = 'Reverse';

            % Create SpeedUpDownButton
            app.SpeedUpDownButton = uibutton(app.UIFigure, 'push');
            app.SpeedUpDownButton.ButtonPushedFcn = createCallbackFcn(app, @SpeedUpDownButtonPushed, true);
            app.SpeedUpDownButton.Position = [334 331 103 22];
            app.SpeedUpDownButton.Text = 'Speed Up/Down';

            % Create CompressorButton
            app.CompressorButton = uibutton(app.UIFigure, 'push');
            app.CompressorButton.ButtonPushedFcn = createCallbackFcn(app, @CompressorButtonPushed, true);
            app.CompressorButton.Position = [12 298 100 22];
            app.CompressorButton.Text = 'Compressor';

            % Create DistortionButton
            app.DistortionButton = uibutton(app.UIFigure, 'push');
            app.DistortionButton.ButtonPushedFcn = createCallbackFcn(app, @DistortionButtonPushed, true);
            app.DistortionButton.Position = [13 267 100 22];
            app.DistortionButton.Text = 'Distortion';

            % Create NormalizeButton
            app.NormalizeButton = uibutton(app.UIFigure, 'push');
            app.NormalizeButton.ButtonPushedFcn = createCallbackFcn(app, @NormalizeButtonPushed, true);
            app.NormalizeButton.Position = [229 299 100 22];
            app.NormalizeButton.Text = 'Normalize';

            % Create ChorusButton
            app.ChorusButton = uibutton(app.UIFigure, 'push');
            app.ChorusButton.ButtonPushedFcn = createCallbackFcn(app, @ChorusButtonPushed, true);
            app.ChorusButton.Position = [337 299 100 22];
            app.ChorusButton.Text = 'Chorus';

            % Create PitchShiftingButton
            app.PitchShiftingButton = uibutton(app.UIFigure, 'push');
            app.PitchShiftingButton.ButtonPushedFcn = createCallbackFcn(app, @PitchShiftingButtonPushed, true);
            app.PitchShiftingButton.Position = [337 266 100 22];
            app.PitchShiftingButton.Text = 'Pitch Shifting';

            % Create ShowOriginalGraphButton
            app.ShowOriginalGraphButton = uibutton(app.UIFigure, 'push');
            app.ShowOriginalGraphButton.ButtonPushedFcn = createCallbackFcn(app, @ShowOriginalGraphButtonPushed, true);
            app.ShowOriginalGraphButton.BackgroundColor = [0 0 0];
            app.ShowOriginalGraphButton.FontColor = [1 1 1];
            app.ShowOriginalGraphButton.Position = [41 208 135 22];
            app.ShowOriginalGraphButton.Text = 'Show Original Graph';

            % Create ShowEffectedGraphButton
            app.ShowEffectedGraphButton = uibutton(app.UIFigure, 'push');
            app.ShowEffectedGraphButton.ButtonPushedFcn = createCallbackFcn(app, @ShowEffectedGraphButtonPushed, true);
            app.ShowEffectedGraphButton.BackgroundColor = [0 0 0];
            app.ShowEffectedGraphButton.FontColor = [1 1 1];
            app.ShowEffectedGraphButton.Position = [40 168 135 22];
            app.ShowEffectedGraphButton.Text = 'Show Effected Graph';

            % Create PlayEffectedAudioButton
            app.PlayEffectedAudioButton = uibutton(app.UIFigure, 'push');
            app.PlayEffectedAudioButton.ButtonPushedFcn = createCallbackFcn(app, @PlayEffectedAudioButtonPushed, true);
            app.PlayEffectedAudioButton.BackgroundColor = [0 0 0];
            app.PlayEffectedAudioButton.FontColor = [1 1 1];
            app.PlayEffectedAudioButton.Position = [272 168 145 22];
            app.PlayEffectedAudioButton.Text = 'Play Effected Audio';

            % Create ClearSoundButton
            app.ClearSoundButton = uibutton(app.UIFigure, 'push');
            app.ClearSoundButton.ButtonPushedFcn = createCallbackFcn(app, @ClearSoundButtonPushed, true);
            app.ClearSoundButton.BackgroundColor = [0 0 0];
            app.ClearSoundButton.FontColor = [1 1 1];
            app.ClearSoundButton.Position = [271 85 145 22];
            app.ClearSoundButton.Text = 'Clear Sound';

            % Create UIAxes2_2
            app.UIAxes2_2 = uiaxes(app.UIFigure);
            title(app.UIAxes2_2, 'Title')
            xlabel(app.UIAxes2_2, 'X')
            ylabel(app.UIAxes2_2, 'Y')
            app.UIAxes2_2.Position = [460 345 368 134];

            % Create file_name_2
            app.file_name_2 = uieditfield(app.UIFigure, 'text');
            app.file_name_2.HorizontalAlignment = 'center';
            app.file_name_2.Position = [18 417 120 22];
            app.file_name_2.Value = 'Effected File Name';

            % Create f_name_2
            app.f_name_2 = uieditfield(app.UIFigure, 'text');
            app.f_name_2.ValueChangedFcn = createCallbackFcn(app, @f_name_2ValueChanged, true);
            app.f_name_2.Position = [150 417 225 22];

            % Create BrowseButton_2
            app.BrowseButton_2 = uibutton(app.UIFigure, 'push');
            app.BrowseButton_2.ButtonPushedFcn = createCallbackFcn(app, @BrowseButton_2Pushed, true);
            app.BrowseButton_2.Position = [381 417 57 22];
            app.BrowseButton_2.Text = 'Browse';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = App_R

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end